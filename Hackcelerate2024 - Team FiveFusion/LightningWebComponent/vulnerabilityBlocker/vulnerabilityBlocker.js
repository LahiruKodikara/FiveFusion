import { LightningElement, api, wire } from 'lwc';
import getUserStoryDetail from '@salesforce/apex/StaticCodeAnalysisProcessor.getUserStoryDetail';

export default class VulnerabilityAlert extends LightningElement {
    @wire(CurrentPageReference) pageRef;
    recordId;

    violatedApexClasses = [];
    latestStaticCodeAnalysisLink;
    showVulnerabilityAlert = false;

    connectedCallback() {
        this.recordId = this.pageRef.attributes.recordId;
        this.getUSDetails(this.recordId);
    }

    getUSDetails(userStoryID){
        getUserStoryDetail({ userStoryId: userStoryID }).then(result => {
            let apexClasses = [];

            if(result.userStoryDetail != null){
                let jsonData = JSON.parse(result.userStoryDetail);

                if(jsonData != null){
                    if(jsonData.Static_Code_Validation_Detail__c != null){
                       let staticCodeAnalysis = JSON.parse(jsonData.Static_Code_Validation_Detail__c);

                       if(staticCodeAnalysis != null){
                           staticCodeAnalysis.map(item => {
                               if(item.isViolationDetected){
                                  apexClasses.push({ name: item.componentName });
                               }
                           })
                       }

                       this.showVulnerabilityAlert = apexClasses.length > 0 ? true : false;
                    }else{
                        this.showVulnerabilityAlert = false;
                    }
                }
            }

            if(result.latestCodeAnalysisResultLink != null){
                this.latestStaticCodeAnalysisLink = result.latestCodeAnalysisResultLink;
            }

            this.violatedApexClasses = apexClasses;
        }).catch(error => {
            this.showVulnerabilityAlert = false;
        });
    }
}